###################################################################
# Script Name : Initial Enumeration
# date        : 20220824
# usage       : bash ie.sh [-s/-r] <remote_IP>
# Author      : d1ch0t0my
# Email       : d1ch0t0my@protonmail.com
# Description : Script to automate my initial enumeration phase
###################################################################

#!/bin/zsh

# COLORS DEFINITION
default='\e[39m'
green='\e[38;5;46m'
yellow='\e[38;5;226m'
white='\e[38;5;15m'
lightGraygrey='\e[37m'
mateBlue='\e[34m'
mateGreen='\e[32m'
mateRed='\e[91m'

dirini=$(pwd)
inictrl="false"

# definition of Ctrl+C behavior
ctrl_c () {
	cd $dirini
	echo -e "\n\n\n[${yellow}!${default}] Detected Ctrl+C\n"
	echo -e "\e[1A\e[K[${green}*${default}] Goodbye...\n\n"
	inictrl="true"
	xdotool key KP_Enter
	tput cnorm
	trap - INT TERM
}

# dictionary
dicname=""
custom=""
if [[ -f /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium_and_common.txt ]]; then
	custom="/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium_and_common.txt"
	dicname="directory-list-2.3-medium_and_common.txt"
else
	custom="/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt"
	dicname="directory-list-2.3-medium.txt"
fi


trap ctrl_c INT # capture Ctrl+C

echo -e '\n\n /$$$$$$           /$$   /$$     /$$           /$$       /$$$$$$$$                                  '
echo -e '|_  $$_/          |__/  | $$    |__/          | $$      | $$_____/                                  '
echo -e '  | $$   /$$$$$$$  /$$ /$$$$$$   /$$  /$$$$$$ | $$      | $$       /$$$$$$$  /$$   /$$ /$$$$$$/$$$$ '
echo -e '  | $$  | $$__  $$| $$|_  $$_/  | $$ |____  $$| $$      | $$$$$   | $$__  $$| $$  | $$| $$_  $$_  $$'
echo -e '  | $$  | $$  \ $$| $$  | $$    | $$  /$$$$$$$| $$      | $$__/   | $$  \ $$| $$  | $$| $$ \ $$ \ $$'
echo -e '  | $$  | $$  | $$| $$  | $$ /$$| $$ /$$__  $$| $$      | $$      | $$  | $$| $$  | $$| $$ | $$ | $$'
echo -e ' /$$$$$$| $$  | $$| $$  |  $$$$/| $$|  $$$$$$$| $$      | $$$$$$$$| $$  | $$|  $$$$$$/| $$ | $$ | $$'
echo -e '|______/|__/  |__/|__/   \___/  |__/ \_______/|__/      |________/|__/  |__/ \______/ |__/ |__/ |__/\n\n'

if [[ "$#" -lt 1 ]]
then
	echo -e "\n    ${mateRed}ERROR:${default} No arguments have been provided${default}"
	echo -e "    ${yellow}Expexted format:${default} 10.10.10.10${default}\n"
	exit
fi

mode="safe"

while true
do
	if [[ "$inictrl" == "true" ]]; then
		break
	fi

	vared -p $'\e[K\e[97m[?] Vulnerability scanning mode with Nmap: \e[38;5;82mSecure \e[97mo \e[38;5;196mNOT Secure\e[97m? \e[97m[\e[38;5;82mY\e[97m/\e[38;5;196mN\e[97m]: \e[0m' -c answer
	case $answer in
	    [Yy]* ) break;;
	    [Nn]* ) mode="unsage"; break;;
	    * ) echo -e "\e[2A\e[K";;
	esac
done

answer=""

if [[ "$answer" == "N" ]] || [[ "$answer" == "n" ]]; then
	mode="unsafe"
fi

if [[ ! -d "01-enumeration" ]]; then
	echo -e "${default}[-] Creating working subdirectories${default}"
	mkdir 01-enumeration
	mkdir 02-exploitation
	mkdir 03-post-exploitation
else
	echo -e "[${yellow}!${default}] The results will be stored in the \"\e[93m01-enumeration\e[0m\"${default} folder, which${yellow} already exists${default}"
	while true
	do
		if [[ "$inictrl" == "true" ]]; then
			return 0
		fi
		vared -p $'[\e[38;5;226m!\e[39m] This may overwrite existing data. \e[93mDo yo want to continue?\e[39m [\e[38;5;196mY\e[0m \e[97mo \e[38;5;82mN\e[97m]: \e[0m' -c yn
		case $yn in
		    [YyYesYESyes]* ) cd 01-enumeration; break;;
		    [NnNoNOno]* ) return;;
		    * ) echo -e "\e[2A\e[K";;
		esac
	done
fi

tput civis
cd 01-enumeration
echo -e "\n\n\e[1;39m[#####] Scanning Ports and Services [#####]\e[0;39m"
echo -e "${default}[-] Inferring the Target OS${default}"
ttl=$(ping -c1 $1|grep ttl|cut -d = -f 3|cut -d " " -f 1)
os=""
if [[ "$ttl" -gt 0 && "$ttl" -lt 65 ]]; then
	os="Linux"
elif [[ "$ttl" -gt 64 && "$ttl" -lt 129 ]]; then
	os="Windows"
else
	os="Unknown"
fi

threads="900"
if [[ $os != *"Linux"* ]]; then
	threads=200
fi

echo -e "${default}[-] Target OS ${green}$os${default}. Initiating Fast Port Scan with $threads threads"
exectime=0

echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} fportscan -host=$1 -threads $threads > 02.1.fportscan.out${lightGraygrey}"
a=$SECONDS; fportscan -host=$1 -threads $threads > 02.1.fportscan.out; b=$SECONDS; exectime=$((b-a))
sed -i '1d' 02.1.fportscan.out # the first line of spacing is removed
cat 02.1.fportscan.out | grep -v "host" | grep ":"
echo -e "scanned in $exectime seconds"

echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} nmap -T4 -Pn -n -p- --open --min-rate 5000 $1 -oG 02.2.nmap_allPorts.grep${lightGraygrey}"
output=$(nmap -T4 -Pn -n -p- --open --min-rate 5000 $1 -oG 02.2.nmap_allPorts.grep)
echo $output | grep -v "Not shown" | grep "tcp\|scanned"

echo -e "${default}[-] Initiating extra scanning of UDP port 161"
echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} nmap -Pn -sU -p161 $1 -oN 02.3.nmap_-sU_-p161.nmap${lightGraygrey}"
output=$(nmap -Pn -sU -p161 $1 -oN 02.3.nmap_-Pn_-p161.nmap)
echo $output | grep -v "Not shown" | grep "udp\|scanned"

ports=""
# Checking if fportscan and nmap have reported the same number of ports
ports1=$(cat 02.1.fportscan.out  | grep 'Open' | awk '{print $1}' FS=':')
ports2=$(cat 02.2.nmap_allPorts.grep | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/')
ports="$ports1\n$ports2"
ports=$(echo $ports | sort -u | xargs | tr ' ' ',')

echo -e "\n\n\e[1;39m[#####] Enumerating Versions and Vulnerabilities [#####]\e[0;39m"
if [[ $ports == "" ]]
then
	echo -e "\n${yellow}[!]${default} NO open ports found."
	echo -e "${default}# End of enumeration"
else
	echo -e "${default}[*] Open ports: ${green}$ports${default}"
	echo -e "${default}[-] OS Detecting, Script Scanning and Versions Enumerating on ports $ports"
	
	echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} nmap -Pn -sS -A -p$ports $1 -oN 03.nmap_versions.nmap${lightGraygrey}"
	nmap -Pn -sS -A -p $ports $1 -oN 03.nmap_versions.nmap
	echo

	if [[ $mode == "safe" ]]
	then
		echo "${default}[-] Vulnerability Scanning in Secure Mode against ports $ports"		
		echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} nmap -Pn -sS --script \"vuln and safe\" -p$ports $1 -oN 04.nmap_safe_vulns.nmap${lightGraygrey}"
		nmap -Pn -sS --script "vuln and safe" -p$ports $1 -oN 04.nmap_safe_vulns.nmap
	else
		echo -e "${default}[-] Vulnerability Scanning in \e[38;5;196mNO-Secure${default} mode against ports $ports"
		echo -e "[\e[1;33;5;196;5m!\e[0;39m]\e[1;39m WARNING\e[0;39m: Consider \e[1;33mrebooting the machine\e[0;39m at the end of this scan."
		echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} nmap -Pn -sS --script vuln --script-args=unsafe=1 -p$ports $1 -oN 04.nmap_unsafe_vulns.nmap${lightGraygrey}"
		nmap -Pn -sS --script vuln --script-args=unsafe=1 -p$ports $1 -oN 04.nmap_unsafe_vulns.nmap
	fi
fi

http_s_ports=$(cat 03.nmap_versions.nmap | grep 'http\|https' |  grep  'tcp')
OLDIFS=$IFS
IFS=$'\n'


echo -e "\n\n\e[1;39m[#####] Basic Web Enumeration [#####]\e[0;39m"
if [[ $http_s_ports == "" ]]
then
	echo -e "${yellow}[!]${default} NO HTTP or HTTPS ports were found open."
	echo -e "# End of Basic Web Enumeration"
else
	if [[ ! -d "web" ]]; then
		mkdir web
		cd web
	else
		cd web
	fi
	
	for line in $http_s_ports
	do
		type="HTTP"
		code="http"
	    if [[ $line == *"https"* ]] || [[ $line == *"443/tcp"* ]]
	    then
	        type="HTTPS"
	        code="https"
	    fi
	    port=$(echo "$line" | awk '{print $1}' FS='/')
	    echo -e "[${yellow}-${default}] Starting ${green}$type${default} Basic Web Enumeration on port ${green}$port${default}"
		echo -e "[-] $type${default} Whatweb"
		
		echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} whatweb $code://$1:$port > whatweb_$port.out${default}"
		out=$(whatweb $code://$1:$port 2>&1 >/dev/null)
		# If you get the dh key to small error you can fix it by adding '--cipher "DEFAULT:!DH' to /etc/ssl/openssl.cnf
		# this checks for the error and if it does it adds it to the file and then deletes it.
		if [[ $out == *"dh key too small"* ]]
		then
			echo -e "${yellow}[!]${default}     ${mateRed}ERROR${default}: Running WhatWeb returns error: \"dh key to small\"${default}"
			echo "[*]     The line \"--cipher \'DEFAULT:!DH\'\" is added to the end of the file /etc/ssl/openssl.cnf"
			echo '--cipher "DEFAULT:!DH"' >> /etc/ssl/openssl.cnf
			echo "[-]     Restarting Whatwheb"
			whatweb $code://$1:$port > whatweb_$port.out
			echo "[*]     Tthe previously added line in /etc/ssl/openssl.cnf is removed"
			cat whatweb_$port.out
			tail -n 1 /etc/ssl/openssl.cnf | wc -c | xargs -I {} truncate /etc/ssl/openssl.cnf -s -{}
		else
			whatweb $code://$1:$port > whatweb_$port.out
			cat whatweb_$port.out
		fi
		echo -e "\n${default}[-] Checking robots.txt on port $port"
		
		echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} curl -k -L $code://$1:$port/robots.txt -s | html2text > curl_robots_$code_$port.txt${lightGraygrey}"
		curl -k -L $code://$1:$port/robots.txt -s | html2text > curl_robots_$code_$port.txt
		cat curl_robots_$code_$port.txt
		echo -e "\n${default}[-] Running Feroxbuster against port $port with dictionary \"$dicname\""		
		echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} feroxbuster -u $code://$1:$port -w $custom -o feroxbuster_$port.txt${lightGraygrey}"
		a=$SECONDS; feroxbuster -u $code://$1:$port -w $custom -o feroxbuster_$port.txt; b=$SECONDS; exectime=$((b-a))
		echo -e "scanned in $exectime seconds"
		echo -e "\n${default}[-] Running dirb against port $port"
		echo -e "[${mateBlue}i${default}] COMMAND:${mateGreen} dirb $code://$1:$port -o dirb_$port.txt${lightGraygrey}"
		a=$SECONDS; dirb $code://$1:$port -o dirb_$port.txt; b=$SECONDS; exectime=$((b-a))
		echo -e "scanned in $exectime seconds"
		echo -e "${default}# Completed Basic Web Enumeration $type against port $port$\n"
	done
	cd ..
fi
IFS=$OLDIFS
cd $dirini
tput cnorm
